Main page: https://www.geeksforgeeks.org/fundamentals-of-algorithms/#MathematicalAlgorithms
I recommend to observe and understand this program before trying 14 and 15th problem: https://repl.it/repls/LonelyAdventurousPagerecognition


Solve the following problems:
1) Find the absolute value of a number:
2) Convert Celsius to Fahrenheit
3) Quadratic Equation Roots
4) Fatorial of a number
5) Digits in Factorial
6) GP Term
7) Primality Test
8) Exactly 3 Divisors
9) Mean and Median
10) Addition under Modulo
11) Multiplication under Modulo
12) Modular Multiplicative Inverse
13) Counting number of set bits in a number
14) In an array, all numbers are evenly repeated  except one. FInd that number
15) In an array, all numbers are evenly repeated except two. Find those numbers
16) GCD of two numbers
17) Counting Trailing zeroes in factorial 
18) Modulo Inverse 


First try yourself, if you won't able to do then only proceed to solutions:- 

Note:- Solutions include only the functions

++++++++++++++  
+ Solutions: +
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

1) Find the absolute value of a number:

int absolute(int x) {
    if (x<0){
        return -x;
    }
    else{
        return x;
    }
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2) Convert Celsius to Fahrenheit:

int cToF(C):
    return (C* 9/5) + 32


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3) Quadratic Equation Roots:

//https://www.mathgoodies.com/calculators/quadratic_equations - Roots of a quadratic equation calculator

void quadraticRoots(int a,int b, int c)
{
   int D = (b*b) - 4*a*c;                           
   
   if (D < 0){
       printf("Imaginary");
   }
   else if (D == 0){
       int x = floor(((-b) + sqrt(D))/(2*a)); 
       printf("%d %d", x, x);
   }
   else if (D > 0){
       int x = floor(((-b) + sqrt(D))/(2*a)); 
       int y = floor(((-b) - sqrt(D))/(2*a)); 
       printf("%d %d", x, y);
   }  
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

4) Fatorial of a number:

#define ll long long                  // To save time we can define long long as 'll'
long long factorial (int N)
{
    ll res = 1;
    for (ll i = N; i > 0; i--){
        
        res *= i;
    }
    return res;
}


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

5) Digits in Factorial:

__BRUTE FORCE METHOD:__

def digitsInFactorial(N):    
    res = math.factorial(N)  
    digits = 0   
    while res > 0:
        res = res // 10
        digits += 1
        
    return digits


__LOGARITHMIC METHOD:__

import math
def factdig(n):
  if n <0:
    return 0
  if n <= 1:
    return 1
  
  d = 0
  while n > 0:
    d += math.log10(n)
    n -= 1  

  return math.floor(d+1)

print(factdig(42))
 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

6) GP Term:

def termOfGP(a,b,n):

    r = b/a
    
    return a*r**(n-1)

print(termOfGP(84,87,3) --> 90
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


7) Primality Test: Generating a range of prime no's these can be done in two ways:
1) Using for loops and checking whether a number is divisible by one and itself. 
2) Using Sieve of Erastothenes

__1st method:-__ 

import math
def prime(n):
  print("Prime")
  for i in range(2,n):
    cnt = 0
    for j in range(1, math.floor(math.sqrt(n))):
      if i%j == 0:
        cnt += 1
                
    if cnt== 1:
      print(i)
    
prime(int(input()))



__2nd method using Sieves theorem__:

def Sieve(n):
  prime = [True for i in range(n+1)]
  p = 2
  while p*p <= n:
    if prime[p] == True:
      for i in range(p*p, n+1, p):
        prime[i] = False
      
    p += 1

  for i in range(2,n+1):
    if prime[i] == True:
      print(i)

Sieve(5000)


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

8) Exactly 3 Divisors: 

Tip: The only numbers whose square root is prime can only have 3 divisors i.e. i, prime square root and the number itself

For Example: For 4: 1, sqrt(4) = 2, 4


##Complete this function
import math
def exactly3Divisors(n):
    prime = [True for i in range(n+1)]
    p = 2
    while p*p <= n:
        for i in range(p*p, n, p):
            prime[i] = False    
        p += 1

    dict = {}
    for k in range(2,n):
      if prime[k] == True:
        dict[k] = 0

    c = 0
    for i in range(n+1):
      x = math.sqrt(i)   
      if x in dict:        
        c += 1
        
    return c
    
    
    

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

9) Mean and Median:

def median(A,N):
    
    A.sort()
    
    if N&1:
        return A[N//2]
    return (A[N//2] + A[(N//2)-1])//2  # For even length, median is the average of the middle two numbers
    
    
def mean(A,N):
    x = len(A)
    sum = 0
    
    for i in range(x):
        sum += A[i]
        
    return sum//x
        

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
10) Addition under Modulo:

def additionUnderModulo(a,b):

    M = 1000000007
    
    return ((a%M)+(b%M)%M)
    
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
11) Multiplication under Modulo:

def multiplicationUnderModulo(a,b):

    M = 1000000007
    
    return ( (a%M)*(b%M)%M)
    
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
12) Modular Multiplicative Inverse:
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
13) counting set bits of a number:

n = int(input())
res = 0
while n > 0:
  n = n&(n-1)
  res += 1
  
print(res)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
14) In an array, all numbers are evenly repeated  except one. FInd that number

def solve(arr):
  res = 0
  for i in arr:
    res ^= i

  return res

print(solve([3,3,4,4,5]))

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
15) In an array, all numbers are evenly repeated except two. Find those numbers

def solve(arr, n):
  res = 0
  for i in arr:
    res ^= i
  
  # Finding rightmost set bit
  rm = res & (~(res-1))
  x,y = 0,0

  for i in arr:
    if i&rm:
      x ^= i
    else:
      y ^= i
  return x,y
  
print(solve([2,3,3,4,4,5], 6))

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
16) GCD of two numbers:  Time Complexity = O(log(min(a,b)))

def gcd(a,b):
  if a==0:
    return b

  print(a,b, b%a)
  return gcd(b%a,a)

print(gcd(24,9)) --> 3

HCF (GCD) of co-primes is 1

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

17) Counting trailing zeroes in a factorial:
Trailing zeroes are zeroes which comes at the end of factorial. 
For ex:- 5! = 120 So, trailing zero is 1


import math
def trailingZeroes(n):
  i = 5
  cnt = 0

  while n/i > 0:
    cnt += n/i
    i *= 5
  
  return math.floor(cnt)

print(TrailingZeroes(100))

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

18) Modulo Inverse: 

def gcd(a,b):
  if a == 0:
    return b
  return gcd(b%a,a)

def modI(a, M):
  for i in range(M):
    if i*a % M == 1:
      return i

print(modI(3,11))


